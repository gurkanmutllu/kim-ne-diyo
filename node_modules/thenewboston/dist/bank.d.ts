import { ServerNode } from "./server-node";
import { PrimaryValidator } from "./primary-validator";
import type { PaginationOptions, BankConfigResponse, Transaction, PaginatedTransactionEntry, PaginatedEntry, PaginatedBankEntry, PaginatedEntryMetadata, PaginatedBlockEntry, PaginatedValidatorEntry, CleanResponse, CrawlResponse } from "./models";
import type { Account } from "./account";
/** Used for creating banks and sending requests easily to that specific bank server node. */
export declare class Bank extends ServerNode {
    /**
     * Updates the given server account's trust on the bank.
     * @param accountNumber the account number of the server to update
     * @param trust the trust of the the server
     * @param account the account for the server node in which the account number is the node identifier and the signing key is the node identifier signing key
     */
    updateAccountTrust(accountNumber: string, trust: number, account: Account): Promise<unknown>;
    /**
     * Gets the transactions for the given bank.
     * @param options The optional object for the pagination options.
     */
    getTransactions(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<PaginatedTransactionEntry & PaginatedEntry>>;
    /**
     * Gets the bank with the specified node identifier.
     * @param nodeIdentifier Node Identifier of a bank.
     */
    getBank(nodeIdentifier: string): Promise<PaginatedBankEntry>;
    /**
     * Gets the connected banks for the given bank.
     * @param options The optional object for the pagination options.
     */
    getBanks(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<PaginatedBankEntry>>;
    /**
     * Updates a given bank's trust.
     * @param nodeIdentifier the bank to update's node identifier
     * @param trust the new bank's trust
     * @param account the account to sign the request
     */
    updateBankTrust(nodeIdentifier: string, trust: number, account: Account): Promise<unknown>;
    /**
     * Updates a given validators's trust.
     * @param nodeIdentifier the validator to update's node identifier
     * @param trust the new validator's trust
     * @param account the current bank's network Id to sign the request
     */
    updateValidatorTrust(nodeIdentifier: string, trust: number, account: Account): Promise<unknown>;
    /**
     * Gets the blocks for the given bank.
     * @param options The optional object for the pagination options.
     */
    getBlocks(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<PaginatedBlockEntry & PaginatedEntryMetadata>>;
    /**
     * Adds new transaction blocks to the blockchain.
     * @param balanceLock the current balance lock
     * @param transactions the transactions to push to the block chain
     * @param account the account that is sending the transactions
     */
    addBlocks(balanceLock: string, transactions: Transaction[], account: Account): Promise<unknown>;
    /**
     * Gets the current bank's config data.
     */
    getConfig(): Promise<BankConfigResponse>;
    /** Gets the current crawl status */
    getCrawlStatus(): Promise<CrawlResponse>;
    /**
     * Sends a Post Request to the bank to start crawl process
     * @param account An Account created with the Network Id Signing key of the current Bank
     */
    startCrawl(account: Account): Promise<CrawlResponse>;
    /**
     * Sends a Post Request to the bank to start crawl process
     * @param account An Account created with the Network Id Signing key of the current Bank
     */
    stopCrawl(account: Account): Promise<CrawlResponse>;
    /** Gets the current clean status */
    getCleanStatus(): Promise<CleanResponse>;
    /**
     * Sends a Post Request to the bank to start clean process
     * @param account An Account created with the Network Id Signing key of the current Bank
     */
    startClean(account: Account): Promise<CleanResponse>;
    /**
     * Sends a Post Request to the bank to start clean process
     * @param account An Account created with the Network Id Signing key of the current Bank
     */
    stopClean(account: Account): Promise<CleanResponse>;
    /**
     * Gets the confirmation blocks for the given bank.
     * @param options The optional object for the pagination options.
     */
    getConfirmationBlocks(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<unknown>>;
    /**
     * Gets the invalid blocks for the given bank.
     * @param options The optional object for the pagination options.
     */
    getInvalidBlocks(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<unknown>>;
    /**
     * Gets the validator confirmation services for the given bank.
     * @param options The optional object for the pagination options.
     */
    getValidatorConfirmationServices(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<unknown>>;
    /**
     * Updates the validator's confirmation services data.
     * @param start the validator's services start date
     * @param end the validator's services end date
     * @param account the server's account to validate the requests
     */
    updateValidatorConfirmationServices(start: string, end: string, account: Account): Promise<unknown>;
    /**
     * Sends a signed POST request to the bank for an upgrade notice.
     * @param nodeIdentifier the node identifier of the bank that is receiving the upgrade notice
     * @param account the current bank server's account
     */
    sendUpgradeNotice(nodeIdentifier: string, account: Account): Promise<unknown>;
    /**
     * Gets the validator with the specified node identifier.
     * @param nodeIdentifier Node Identifier of a validator.
     */
    getValidator(nodeIdentifier: string): Promise<PaginatedValidatorEntry>;
    /**
     * Gets all of the validators for the current bank.
     * @param options The optional object for the pagination options.
     */
    getValidators(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<PaginatedValidatorEntry>>;
    /**
     * Gets the PrimaryValidator for the current bank.
     */
    getBankPV(): Promise<PrimaryValidator>;
    /**
     * Get transaction fee of the current Primary Validator
     */
    getTxFee(): Promise<number>;
}
