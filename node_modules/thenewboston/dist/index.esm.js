function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.string.replace.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/web.url.js";
import "core-js/modules/es.array-buffer.slice.js";
import "core-js/modules/es.typed-array.uint8-array.js";
import "core-js/modules/es.array.sort.js";
import "core-js/modules/es.string.trim.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.promise.js";
import axios from 'axios';
import { sign } from 'tweetnacl';
/** Converts a Uint8Array to a hexadecimal string. */

function uint8arrayToHex(array) {
  return Buffer.from(array).toString("hex");
}
/**
 * Generates an account with a 32-bit account number and signing key.
 * @returns the generated account
 */


function createAccountData() {
  var keyPair = sign.keyPair();
  var {
    publicKey,
    secretKey: signingKey
  } = keyPair;
  var publicKeyHex = uint8arrayToHex(publicKey);
  var signingKeyHex = uint8arrayToHex(signingKey);
  return {
    publicKey,
    publicKeyHex,
    signingKey,
    signingKeyHex: signingKeyHex.replace(publicKeyHex, "")
  };
}
/**
 * Formats the options for server nodes.
 * @param options the object for the server node options
 */


function formatDefaultOptions(options) {
  /*
      Default Options should look like:
      {
        defaultPagination: {
          limit: 20,
          offset: 0
        }
      }
      but also allow re-writes to the `defaultPagination` key while having all keys.
    */
  return _objectSpread(_objectSpread({}, options), {}, {
    defaultPagination: _objectSpread({
      limit: 20,
      offset: 0
    }, options.defaultPagination || {})
  });
}
/**
 * Normalizes a url for requests to be made with.
 * @param url the url string that must include the protocol (https, http, ect.) of the requests
 */


function formatUrl(url) {
  var {
    protocol,
    host
  } = new URL(url);
  return "".concat(protocol !== null && protocol !== void 0 ? protocol : "http", "//").concat(host);
}

function hexToUint8Array(arr) {
  return new Uint8Array(Buffer.from(arr, "hex"));
}

function throwError(description, error) {
  var message = "Error(thenewboston-js): ".concat(description);

  if (error) {
    message += "Further details may be provided below:\n".concat(error);
  }

  throw Error(message);
}

class TransferDetails {
  constructor(sender, recipient, amount, memo) {
    this.sender = sender;
    this.recipient = recipient;
    this.amount = amount;
    this.memo = memo;
  }

}
/**
 * Used internally for all server nodes.
 *
 * Note: this class is meant to be extended.
 */


class ServerNode {
  constructor(url, options = {}) {
    this.url = formatUrl(url);
    this.options = formatDefaultOptions(options);
  }
  /**
   * Gets data for the given endpoint with the given query params.
   * @param endpoint the endpoint to send the request to
   * @param params the optional object for the query params
   */


  getData(endpoint, params = {}) {
    var _this = this;

    return _asyncToGenerator(function* () {
      var res = yield axios.get("".concat(_this.url).concat(endpoint), {
        params
      });
      return res.data;
    })();
  }
  /**
   * Used internally for handling paginated requests.
   * @param endpoint the endpoint to send the request to
   * @param options the optional object for the pagination options
   */


  getPaginatedData(endpoint, options) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return yield _this2.getData(endpoint, _objectSpread(_objectSpread({}, _this2.options.defaultPagination), options));
    })();
  }
  /**
   * Sends a POST request to the current server with the given `data`.
   * @param endpoint the endpoint to send the request to
   * @param data what is sent along with the POST request
   */


  postData(endpoint, data) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      var res = yield axios.post("".concat(_this3.url).concat(endpoint), data).catch(err => {
        console.log(err.response.data);
        throwError("Failed to postData:", err);
      });
      return res.data;
    })();
  }
  /**
   * Sends a PATCH request to the current server with the given `data`.
   * @param endpoint the endpoint to send the request to
   * @param data what is sent along with the PATCH request
   */


  patchData(endpoint, data) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      var res = yield axios.patch("".concat(_this4.url).concat(endpoint), data);
      return res.data;
    })();
  }
  /**
   * Gets the accounts for the given server node in a paginated format.
   * @param options The optional object for the pagination options.
   */


  getAccounts(options = {}) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      return yield _this5.getPaginatedData("/accounts", options);
    })();
  }
  /** Gets the current config data for the current validator. */


  _getConfig() {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      return yield _this6.getData("/config");
    })();
  }
  /**
   * Sends a connection request to this current network with the data about the new server.
   * @param ipAddress the new server node's ip address
   * @param port the new node's port
   * @param protocol the new node's protocol
   * @param account the server account to validate the request
   */


  sendConnectionRequest(ipAddress, port, protocol, account) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      return yield _this7.postData("/connection_requests", account.createSignedMessage({
        ip_address: ipAddress,
        port,
        protocol
      }));
    })();
  }

}
/**
 * Used as a base for all types of validator nodes.
 *
 * Note: this class is meant to be extended.
 */


class Validator extends ServerNode {
  /**
   * Gets the bank with the specified node identifier.
   * @param nodeIdentifier Node Identifier of a bank.
   */
  getBank(nodeIdentifier) {
    var _superprop_getGetData = () => super.getData,
        _this8 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData().call(_this8, "/banks/".concat(nodeIdentifier));
    })();
  }
  /** Gets all of the banks connected to the current validator. */


  getBanks(options = {}) {
    var _superprop_getGetPaginatedData = () => super.getPaginatedData,
        _this9 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData().call(_this9, "/banks", options);
    })();
  }
  /**
   * Gets the account balance with the given account number (id).
   * @param accountNumber the public key of the account
   */


  getAccountBalance(accountNumber) {
    var _superprop_getGetData2 = () => super.getData,
        _this10 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData2().call(_this10, "/accounts/".concat(accountNumber, "/balance"));
    })();
  }
  /**
   * Gets the balance lock of the given account.
   * @param accountNumber the public key of the account
   */


  getAccountBalanceLock(accountNumber) {
    var _superprop_getGetData3 = () => super.getData,
        _this11 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData3().call(_this11, "/accounts/".concat(accountNumber, "/balance_lock"));
    })();
  }
  /**
   * Gets the details of given block identifier's queued transactions.
   * @param blockId the block identifier
   */


  getQueuedConfirmationBlock(blockId) {
    var _superprop_getGetData4 = () => super.getData,
        _this12 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData4().call(_this12, "/confirmation_blocks/".concat(blockId, "/queued"));
    })();
  }
  /**
   * Gets the details of given block identifier's valid transactions.
   * @param blockId the block identifier
   */


  getValidConfirmationBlock(blockId) {
    var _superprop_getGetData5 = () => super.getData,
        _this13 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData5().call(_this13, "/confirmation_blocks/".concat(blockId, "/valid"));
    })();
  }
  /**
   * Gets the validator with the specified node identifier.
   * @param nodeIdentifier Node Identifier of a validator.
   */


  getValidator(nodeIdentifier) {
    var _superprop_getGetData6 = () => super.getData,
        _this14 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData6().call(_this14, "/validators/".concat(nodeIdentifier));
    })();
  }
  /**
   * Gets all of the connected validators to the current validator.
   * @param options the pagination options
   */


  getValidators(options = {}) {
    var _superprop_getGetPaginatedData2 = () => super.getPaginatedData,
        _this15 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData2().call(_this15, "/validators", options);
    })();
  }
  /**
   * Updates a given bank's trust.
   * @param nodeIdentifier the bank to update's node identifier
   * @param trust the new bank's trust
   * @param account the current validators's network Id to sign the request
   */


  updateBankTrust(nodeIdentifier, trust, account) {
    var _superprop_getPatchData = () => super.patchData,
        _this16 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPatchData().call(_this16, "/banks/".concat(nodeIdentifier), account.createSignedMessage({
        trust
      }));
    })();
  }
  /**
   * Updates a given validators's trust.
   * @param nodeIdentifier the validator to update's node identifier
   * @param trust the new validator's trust
   * @param account the current validators's network Id to sign the request
   */


  updateValidatorTrust(nodeIdentifier, trust, account) {
    var _superprop_getPatchData2 = () => super.patchData,
        _this17 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPatchData2().call(_this17, "/validators/".concat(nodeIdentifier), account.createSignedMessage({
        trust
      }));
    })();
  }

}
/** Used for connecting with and using primary validator server nodes. */


class PrimaryValidator extends Validator {
  /** Gets the config of the current primary validator server. */
  getConfig() {
    var _superprop_get_getConfig = () => super._getConfig,
        _this18 = this;

    return _asyncToGenerator(function* () {
      return _superprop_get_getConfig().call(_this18);
    })();
  }
  /**
   * Bank blocks would need to be signed by the bank indicating tha the block has passed the validation.
   * @param balanceLock the current balance lock
   * @param transactions the transactions to push to the block chain
   * @param account the account that is sending the transactions
   */


  addBankBlocks(balanceLock, transactions, account) {
    var _this19 = this;

    return _asyncToGenerator(function* () {
      return yield _this19.postData("/bank_blocks", account.createBlockMessage(balanceLock, transactions));
    })();
  }
  /**
   * Get transaction fee of the current Primary Validator
   */


  getTxFee() {
    var _this20 = this;

    return _asyncToGenerator(function* () {
      return (yield _this20.getConfig()).default_transaction_fee;
    })();
  }

}
/** Used for creating banks and sending requests easily to that specific bank server node. */


class Bank extends ServerNode {
  /**
   * Updates the given server account's trust on the bank.
   * @param accountNumber the account number of the server to update
   * @param trust the trust of the the server
   * @param account the account for the server node in which the account number is the node identifier and the signing key is the node identifier signing key
   */
  updateAccountTrust(accountNumber, trust, account) {
    var _superprop_getPatchData3 = () => super.patchData,
        _this21 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPatchData3().call(_this21, "/accounts/".concat(accountNumber), account.createSignedMessage({
        trust
      }));
    })();
  }
  /**
   * Gets the transactions for the given bank.
   * @param options The optional object for the pagination options.
   */


  getTransactions(options = {}) {
    var _superprop_getGetPaginatedData3 = () => super.getPaginatedData,
        _this22 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData3().call(_this22, "/bank_transactions", options);
    })();
  }
  /**
   * Gets the bank with the specified node identifier.
   * @param nodeIdentifier Node Identifier of a bank.
   */


  getBank(nodeIdentifier) {
    var _superprop_getGetData7 = () => super.getData,
        _this23 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData7().call(_this23, "/banks/".concat(nodeIdentifier));
    })();
  }
  /**
   * Gets the connected banks for the given bank.
   * @param options The optional object for the pagination options.
   */


  getBanks(options = {}) {
    var _superprop_getGetPaginatedData4 = () => super.getPaginatedData,
        _this24 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData4().call(_this24, "/banks", options);
    })();
  }
  /**
   * Updates a given bank's trust.
   * @param nodeIdentifier the bank to update's node identifier
   * @param trust the new bank's trust
   * @param account the account to sign the request
   */


  updateBankTrust(nodeIdentifier, trust, account) {
    var _superprop_getPatchData4 = () => super.patchData,
        _this25 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPatchData4().call(_this25, "/banks/".concat(nodeIdentifier), account.createSignedMessage({
        trust
      }));
    })();
  }
  /**
   * Updates a given validators's trust.
   * @param nodeIdentifier the validator to update's node identifier
   * @param trust the new validator's trust
   * @param account the current bank's network Id to sign the request
   */


  updateValidatorTrust(nodeIdentifier, trust, account) {
    var _superprop_getPatchData5 = () => super.patchData,
        _this26 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPatchData5().call(_this26, "/validators/".concat(nodeIdentifier), account.createSignedMessage({
        trust
      }));
    })();
  }
  /**
   * Gets the blocks for the given bank.
   * @param options The optional object for the pagination options.
   */


  getBlocks(options = {}) {
    var _superprop_getGetPaginatedData5 = () => super.getPaginatedData,
        _this27 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData5().call(_this27, "/blocks", options);
    })();
  }
  /**
   * Adds new transaction blocks to the blockchain.
   * @param balanceLock the current balance lock
   * @param transactions the transactions to push to the block chain
   * @param account the account that is sending the transactions
   */


  addBlocks(balanceLock, transactions, account) {
    var _superprop_getPostData = () => super.postData,
        _this28 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData().call(_this28, "/blocks", account.createBlockMessage(balanceLock, transactions));
    })();
  }
  /**
   * Gets the current bank's config data.
   */


  getConfig() {
    var _superprop_getGetData8 = () => super.getData,
        _this29 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData8().call(_this29, "/config");
    })();
  }
  /** Gets the current crawl status */


  getCrawlStatus() {
    var _superprop_getGetData9 = () => super.getData,
        _this30 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData9().call(_this30, "/crawl");
    })();
  }
  /**
   * Sends a Post Request to the bank to start crawl process
   * @param account An Account created with the Network Id Signing key of the current Bank
   */


  startCrawl(account) {
    var _superprop_getPostData2 = () => super.postData,
        _this31 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData2().call(_this31, "/crawl", account.createSignedMessage({
        crawl: "start"
      }));
    })();
  }
  /**
   * Sends a Post Request to the bank to start crawl process
   * @param account An Account created with the Network Id Signing key of the current Bank
   */


  stopCrawl(account) {
    var _superprop_getPostData3 = () => super.postData,
        _this32 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData3().call(_this32, "/crawl", account.createSignedMessage({
        crawl: "stop"
      }));
    })();
  }
  /** Gets the current clean status */


  getCleanStatus() {
    var _superprop_getGetData10 = () => super.getData,
        _this33 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData10().call(_this33, "/clean");
    })();
  }
  /**
   * Sends a Post Request to the bank to start clean process
   * @param account An Account created with the Network Id Signing key of the current Bank
   */


  startClean(account) {
    var _superprop_getPostData4 = () => super.postData,
        _this34 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData4().call(_this34, "/clean", account.createSignedMessage({
        clean: "start"
      }));
    })();
  }
  /**
   * Sends a Post Request to the bank to start clean process
   * @param account An Account created with the Network Id Signing key of the current Bank
   */


  stopClean(account) {
    var _superprop_getPostData5 = () => super.postData,
        _this35 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData5().call(_this35, "/clean", account.createSignedMessage({
        clean: "stop"
      }));
    })();
  }
  /**
   * Gets the confirmation blocks for the given bank.
   * @param options The optional object for the pagination options.
   */


  getConfirmationBlocks(options = {}) {
    var _superprop_getGetPaginatedData6 = () => super.getPaginatedData,
        _this36 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData6().call(_this36, "/confirmation_blocks", options);
    })();
  } // TODO: POST /confirmation_blocks

  /**
   * Gets the invalid blocks for the given bank.
   * @param options The optional object for the pagination options.
   */


  getInvalidBlocks(options = {}) {
    var _superprop_getGetPaginatedData7 = () => super.getPaginatedData,
        _this37 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData7().call(_this37, "/invalid_blocks", options);
    })();
  }
  /**
   * Gets the validator confirmation services for the given bank.
   * @param options The optional object for the pagination options.
   */


  getValidatorConfirmationServices(options = {}) {
    var _superprop_getGetPaginatedData8 = () => super.getPaginatedData,
        _this38 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData8().call(_this38, "/validator_confirmation_services", options);
    })();
  }
  /**
   * Updates the validator's confirmation services data.
   * @param start the validator's services start date
   * @param end the validator's services end date
   * @param account the server's account to validate the requests
   */


  updateValidatorConfirmationServices(start, end, account) {
    var _superprop_getPostData6 = () => super.postData,
        _this39 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData6().call(_this39, "/validator_confirmation_services", account.createSignedMessage({
        start,
        end
      }));
    })();
  }
  /**
   * Sends a signed POST request to the bank for an upgrade notice.
   * @param nodeIdentifier the node identifier of the bank that is receiving the upgrade notice
   * @param account the current bank server's account
   */


  sendUpgradeNotice(nodeIdentifier, account) {
    var _superprop_getPostData7 = () => super.postData,
        _this40 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData7().call(_this40, "/upgrade_notice", account.createSignedMessage({
        bank_node_identifier: nodeIdentifier
      }));
    })();
  }
  /**
   * Gets the validator with the specified node identifier.
   * @param nodeIdentifier Node Identifier of a validator.
   */


  getValidator(nodeIdentifier) {
    var _superprop_getGetData11 = () => super.getData,
        _this41 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData11().call(_this41, "/validators/".concat(nodeIdentifier));
    })();
  }
  /**
   * Gets all of the validators for the current bank.
   * @param options The optional object for the pagination options.
   */


  getValidators(options = {}) {
    var _superprop_getGetPaginatedData9 = () => super.getPaginatedData,
        _this42 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData9().call(_this42, "/validators", options);
    })();
  }
  /**
   * Gets the PrimaryValidator for the current bank.
   */


  getBankPV() {
    var _this43 = this;

    return _asyncToGenerator(function* () {
      var {
        primary_validator
      } = yield _this43.getConfig();
      return new PrimaryValidator("".concat(primary_validator.protocol, "://").concat(primary_validator.ip_address).concat(primary_validator.port === null ? "" : ":" + primary_validator.port));
    })();
  }
  /**
   * Get transaction fee of the current Primary Validator
   */


  getTxFee() {
    var _this44 = this;

    return _asyncToGenerator(function* () {
      return (yield _this44.getConfig()).default_transaction_fee;
    })();
  }

}
/** Used for connecting with and using confirmation validator server nodes. */


class ConfirmationValidator extends Validator {
  /** Gets the current confirmation confirmation validator's listed services. */
  getBankConfirmationServices(options = {}) {
    var _superprop_getGetPaginatedData10 = () => super.getPaginatedData,
        _this45 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetPaginatedData10().call(_this45, "/bank_confirmation_services", options);
    })();
  }
  /** Gets the current crawl status */


  getCrawlStatus() {
    var _superprop_getGetData12 = () => super.getData,
        _this46 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData12().call(_this46, "/crawl");
    })();
  }
  /**
   * Sends a Post Request to the confirmation validator to start crawl process
   * @param account An Account created with the Network Id Signing key of the current Confirmation Validator
   */


  startCrawl(account) {
    var _superprop_getPostData8 = () => super.postData,
        _this47 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData8().call(_this47, "/crawl", account.createSignedMessage({
        crawl: "start"
      }));
    })();
  }
  /**
   * Sends a Post Request to the confirmation validator to start crawl process
   * @param account An Account created with the Network Id Signing key of the current Confirmation Validator
   */


  stopCrawl(account) {
    var _superprop_getPostData9 = () => super.postData,
        _this48 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData9().call(_this48, "/crawl", account.createSignedMessage({
        crawl: "stop"
      }));
    })();
  }
  /** Gets the current clean status */


  getCleanStatus() {
    var _superprop_getGetData13 = () => super.getData,
        _this49 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getGetData13().call(_this49, "/clean");
    })();
  }
  /**
   * Sends a Post Request to the confirmation validator to start clean process
   * @param account An Account created with the Network Id Signing key of the current Confirmation Validator
   */


  startClean(account) {
    var _superprop_getPostData10 = () => super.postData,
        _this50 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData10().call(_this50, "/clean", account.createSignedMessage({
        clean: "start"
      }));
    })();
  }
  /**
   * Sends a Post Request to the confirmation validator to start clean process
   * @param account An Account created with the Network Id Signing key of the current Confirmation Validator
   */


  stopClean(account) {
    var _superprop_getPostData11 = () => super.postData,
        _this51 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData11().call(_this51, "/clean", account.createSignedMessage({
        clean: "stop"
      }));
    })();
  } // TODO: POST /confirmation_blocks

  /**
   * Sends a notification to the bank that a primary validator has left the network.
   * @param ipAddress the ip address of the primary validator that is leaving
   * @param port the port that the primary validator is on
   * @param protocol the protocol of the primary validator
   * @param account the account that the current `ConfirmationValidator` is connected to
   */


  sendPrimaryValidatorUpdatedPing(ipAddress, port, protocol, account) {
    var _superprop_getPostData12 = () => super.postData,
        _this52 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData12().call(_this52, "/primary_validator_updated", account.createSignedMessage({
        ip_address: ipAddress,
        port,
        protocol
      }));
    })();
  }
  /**
   * Sends a signed POST request to the confirmation validator for an upgrade request.
   * @param nodeIdentifier the node identifier of the confirmation validator that is receiving the upgrade notice
   * @param account the current confirmation validator server's account
   */


  sendUpgradeRequest(nodeIdentifier, account) {
    var _superprop_getPostData13 = () => super.postData,
        _this53 = this;

    return _asyncToGenerator(function* () {
      return yield _superprop_getPostData13().call(_this53, "/upgrade_request", account.createSignedMessage({
        validator_node_identifier: nodeIdentifier
      }));
    })();
  }
  /** Gets the current confirmation validator's config data. */


  getConfig() {
    var _superprop_get_getConfig2 = () => super._getConfig,
        _this54 = this;

    return _asyncToGenerator(function* () {
      return _superprop_get_getConfig2().call(_this54);
    })();
  }

}
/** Used for creating accounts to be sent with requests. */


class Account {
  /**
   * @param signingKey the account signing key
   * @param accountNumber the account number
   */
  constructor(signingKey, accountNumber) {
    var accountKeys;

    if (accountNumber && signingKey) {
      accountKeys = Account.fromBothKeys(signingKey, accountNumber);
    } else if (signingKey) {
      accountKeys = Account.fromSigningKey(signingKey);
    } else {
      accountKeys = Account.random();
    }

    this.accountNumber = accountKeys[0];
    this.signingKey = accountKeys[1];
  }

  static fromSigningKey(signingKey) {
    var {
      publicKey: accountNumber,
      secretKey: signingKey_
    } = sign.keyPair.fromSeed(hexToUint8Array(signingKey));
    return [accountNumber, signingKey_];
  }

  static fromBothKeys(signingKey, accountNumber) {
    var accountNumberArray = hexToUint8Array(accountNumber);
    var signingKeyArray = new Uint8Array(64);
    signingKeyArray.set(hexToUint8Array(signingKey));
    signingKeyArray.set(accountNumberArray, 32);
    return [accountNumberArray, signingKeyArray];
  }

  static random() {
    var {
      publicKey: accountNumber,
      signingKey
    } = createAccountData();
    return [accountNumber, signingKey];
  }
  /**
   * Checks if the signing key pair is valid.
   * @param signingKey the given signing key hex string
   * @param accountNumber the given account number hex string
   */


  static isValidPair(signingKey, accountNumber) {
    try {
      return new Account(signingKey).accountNumberHex === accountNumber;
    } catch (_) {
      return false;
    }
  }
  /** The 32 byte account number as a 32 byte hex string. */


  get accountNumberHex() {
    return uint8arrayToHex(this.accountNumber);
  }
  /** The 64 byte account signing key as a 32 byte hex string. */


  get signingKeyHex() {
    return uint8arrayToHex(this.signingKey).slice(0, 64);
  }
  /**
   * Creates a signature for the given message.
   * @param message the message to generate the signature for
   * @returns the generated signature
   */


  createSignature(message) {
    var encodedData = new TextEncoder().encode(message);
    var signatureArray = sign(encodedData, this.signingKey);
    var signature = uint8arrayToHex(signatureArray);
    return signature.substring(0, 128);
  }
  /**
   * Creates a signed data message with the given data.
   * @param data the data to be passed along in the message
   * @returns the signed message
   */


  createSignedMessage(data) {
    return {
      message: data,
      node_identifier: this.accountNumberHex,
      signature: this.createSignature(JSON.stringify(data))
    };
  }
  /**
   * Creates a block data object without a signature.
   * @param balanceLock the latest user balance lock
   * @param transactions the transactions inside of the block
   */


  createBlockData(balanceLock, transactions) {
    var message = {
      balance_key: balanceLock,
      txs: transactions.sort((tx1, tx2) => tx1.recipient.localeCompare(tx2.recipient))
    };
    return {
      account_number: this.accountNumberHex,
      message
    };
  }
  /**
   * Creates a signed block object.
   * @param balanceLock the latest user balance lock
   * @param transactions the transactions inside of the block
   */


  createBlockMessage(balanceLock, transactions) {
    var blockData = this.createBlockData(balanceLock, transactions);
    return _objectSpread(_objectSpread({}, blockData), {}, {
      signature: this.createSignature(JSON.stringify(blockData.message))
    });
  }

}

class PaymentHandler {
  constructor({
    bankUrl
  }) {
    this.bank = new Bank(bankUrl);
  }
  /** This must be ran before using the client. */


  init() {
    var _this55 = this;

    return _asyncToGenerator(function* () {
      yield _this55.updateBank();
      yield _this55.updatePrimaryValidator();
    })();
  }

  updateBank() {
    var _this56 = this;

    return _asyncToGenerator(function* () {
      var config = yield _this56.bank.getConfig().catch(err => throwError("Failed to load the bank's config.", err));
      _this56.bankConfig = config; // it has to be correct if it got this far without the error
    })();
  }

  updatePrimaryValidator() {
    var _this57 = this;

    return _asyncToGenerator(function* () {
      if (!_this57.bankConfig) {
        return;
      }

      _this57.primaryValidator = yield _this57.bank.getBankPV();
      var config = yield _this57.primaryValidator.getConfig().catch(err => throwError("Failed to load the primary validator's config.", err));
      _this57.primaryValidatorConfig = config;
    })();
  }
  /**
   * Creates a transaction with a specific amount of coins to a given account from the sender.
   * @param sender Theobject with the sender's account details
   * @param txs An array with multiple transactions with details of the amount and recipient
   *
   */


  createTransaction(sender, txs) {
    var _this58 = this;

    return _asyncToGenerator(function* () {
      txs = txs.map(tx => {
        if (tx.memo) {
          tx.memo = tx.memo.trim();
          if (!/^[a-zA-Z0-9_ ]*$/.test(tx.memo)) throwError("Invalid memo", "Memo can only contain alphanumeric characters, spaces, and underscores");
          if (tx.memo.length > 64) throwError("Invalid memo", "Memo cannot exceed 64 characters");
        }

        if (tx.memo === "") delete tx.memo;
        return tx;
      });
      var {
        balance_lock: balanceLock
      } = yield _this58.primaryValidator.getAccountBalanceLock(sender.accountNumberHex).catch(err => throwError("Failed to load the balance lock from the primary validator to send the transaction.", err));
      var transactions = [...txs, ...[_this58.bankConfig, _this58.primaryValidatorConfig].map(config => ({
        amount: config.default_transaction_fee,
        fee: config.node_type,
        recipient: config.account_number
      }))];
      return {
        balanceLock,
        transactions,
        sender
      };
    })();
  }
  /**
   * Sends a specific amount of coins to a given account from the sender.
   * @param transaction the object containing transaction details
   */


  broadcastTransaction(transaction) {
    var _this59 = this;

    return _asyncToGenerator(function* () {
      yield _this59.bank.addBlocks(transaction.balanceLock, transaction.transactions, transaction.sender);
    })();
  }
  /**
   * Sends a specific amount of coins to a given account from the sender.
   * @param transferDetails The object with transfer details like sender, recipient and amount
   */


  sendCoins({
    sender,
    recipient,
    amount,
    memo = ""
  }) {
    var _this60 = this;

    return _asyncToGenerator(function* () {
      var recipientAccount = typeof recipient === "string" ? recipient : recipient.accountNumberHex;
      var transaction = yield _this60.createTransaction(sender, [{
        amount,
        memo,
        recipient: recipientAccount
      }]);
      yield _this60.broadcastTransaction(transaction);
    })();
  }
  /**
   * Sends multiple amounts of coins to multiple recipients.
   * @param sender Theobject with the sender's account details
   * @param txs An array with multiple transactions with details of the amount and recipient
   */


  sendBulkTransactions(sender, txs) {
    var _this61 = this;

    return _asyncToGenerator(function* () {
      var transaction = yield _this61.createTransaction(sender, txs);
      yield _this61.broadcastTransaction(transaction);
    })();
  }

}

class AccountPaymentHandler {
  constructor({
    account,
    bankUrl
  }) {
    this.account = account;
    this.client = new PaymentHandler({
      bankUrl
    });
  }

  init() {
    var _this62 = this;

    return _asyncToGenerator(function* () {
      yield _this62.client.init();
    })();
  }

  sendCoins(recipient, amount, memo = "") {
    var _this63 = this;

    return _asyncToGenerator(function* () {
      yield _this63.client.sendCoins(new TransferDetails(_this63.account, recipient, amount, memo));
    })();
  }

  sendBulkTransactions(transactions) {
    var _this64 = this;

    return _asyncToGenerator(function* () {
      yield _this64.client.sendBulkTransactions(_this64.account, transactions);
    })();
  }

}

export { Account, AccountPaymentHandler, Bank, ConfirmationValidator, PaymentHandler, PrimaryValidator, ServerNode, Validator };
