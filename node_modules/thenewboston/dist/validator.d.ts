import { Account } from "./account";
import { ServerNode } from "./server-node";
import type { AccountBalanceResponse, AccountBalanceLockResponse, PaginatedBankEntry, PaginatedValidatorEntry, PaginationOptions, ConfirmationBlock } from "./models";
/**
 * Used as a base for all types of validator nodes.
 *
 * Note: this class is meant to be extended.
 */
export declare abstract class Validator extends ServerNode {
    /**
     * Gets the bank with the specified node identifier.
     * @param nodeIdentifier Node Identifier of a bank.
     */
    getBank(nodeIdentifier: string): Promise<PaginatedBankEntry>;
    /** Gets all of the banks connected to the current validator. */
    getBanks(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<PaginatedBankEntry>>;
    /**
     * Gets the account balance with the given account number (id).
     * @param accountNumber the public key of the account
     */
    getAccountBalance(accountNumber: string): Promise<AccountBalanceResponse>;
    /**
     * Gets the balance lock of the given account.
     * @param accountNumber the public key of the account
     */
    getAccountBalanceLock(accountNumber: string): Promise<AccountBalanceLockResponse>;
    /**
     * Gets the details of given block identifier's queued transactions.
     * @param blockId the block identifier
     */
    getQueuedConfirmationBlock(blockId: string): Promise<ConfirmationBlock>;
    /**
     * Gets the details of given block identifier's valid transactions.
     * @param blockId the block identifier
     */
    getValidConfirmationBlock(blockId: string): Promise<ConfirmationBlock>;
    /**
     * Gets the validator with the specified node identifier.
     * @param nodeIdentifier Node Identifier of a validator.
     */
    getValidator(nodeIdentifier: string): Promise<PaginatedValidatorEntry>;
    /**
     * Gets all of the connected validators to the current validator.
     * @param options the pagination options
     */
    getValidators(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<PaginatedValidatorEntry>>;
    /**
     * Updates a given bank's trust.
     * @param nodeIdentifier the bank to update's node identifier
     * @param trust the new bank's trust
     * @param account the current validators's network Id to sign the request
     */
    updateBankTrust(nodeIdentifier: string, trust: number, account: Account): Promise<unknown>;
    /**
     * Updates a given validators's trust.
     * @param nodeIdentifier the validator to update's node identifier
     * @param trust the new validator's trust
     * @param account the current validators's network Id to sign the request
     */
    updateValidatorTrust(nodeIdentifier: string, trust: number, account: Account): Promise<unknown>;
}
