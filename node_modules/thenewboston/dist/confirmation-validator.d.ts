import { Validator } from "./validator";
import type { Account } from "./account";
import type { ConfirmationValidatorConfigResponse, CleanResponse, CrawlResponse, PaginationOptions } from "./models";
/** Used for connecting with and using confirmation validator server nodes. */
export declare class ConfirmationValidator extends Validator {
    /** Gets the current confirmation confirmation validator's listed services. */
    getBankConfirmationServices(options?: Partial<PaginationOptions>): Promise<import("./models").PaginatedResponse<unknown>>;
    /** Gets the current crawl status */
    getCrawlStatus(): Promise<CrawlResponse>;
    /**
     * Sends a Post Request to the confirmation validator to start crawl process
     * @param account An Account created with the Network Id Signing key of the current Confirmation Validator
     */
    startCrawl(account: Account): Promise<CrawlResponse>;
    /**
     * Sends a Post Request to the confirmation validator to start crawl process
     * @param account An Account created with the Network Id Signing key of the current Confirmation Validator
     */
    stopCrawl(account: Account): Promise<CrawlResponse>;
    /** Gets the current clean status */
    getCleanStatus(): Promise<CleanResponse>;
    /**
     * Sends a Post Request to the confirmation validator to start clean process
     * @param account An Account created with the Network Id Signing key of the current Confirmation Validator
     */
    startClean(account: Account): Promise<CleanResponse>;
    /**
     * Sends a Post Request to the confirmation validator to start clean process
     * @param account An Account created with the Network Id Signing key of the current Confirmation Validator
     */
    stopClean(account: Account): Promise<CleanResponse>;
    /**
     * Sends a notification to the bank that a primary validator has left the network.
     * @param ipAddress the ip address of the primary validator that is leaving
     * @param port the port that the primary validator is on
     * @param protocol the protocol of the primary validator
     * @param account the account that the current `ConfirmationValidator` is connected to
     */
    sendPrimaryValidatorUpdatedPing(ipAddress: string, port: number, protocol: string, account: Account): Promise<unknown>;
    /**
     * Sends a signed POST request to the confirmation validator for an upgrade request.
     * @param nodeIdentifier the node identifier of the confirmation validator that is receiving the upgrade notice
     * @param account the current confirmation validator server's account
     */
    sendUpgradeRequest(nodeIdentifier: string, account: Account): Promise<unknown>;
    /** Gets the current confirmation validator's config data. */
    getConfig(): Promise<ConfirmationValidatorConfigResponse>;
}
