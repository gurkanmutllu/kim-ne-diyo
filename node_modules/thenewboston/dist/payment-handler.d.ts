import type { Account } from "./account";
import type { Transaction } from "./models";
import { TransferDetails } from "./utils";
export interface PaymentHandlerOptions {
    bankUrl: string;
}
export declare class PaymentHandler {
    private bank;
    private bankConfig?;
    private primaryValidator?;
    private primaryValidatorConfig?;
    constructor({ bankUrl }: PaymentHandlerOptions);
    /** This must be ran before using the client. */
    init(): Promise<void>;
    updateBank(): Promise<void>;
    updatePrimaryValidator(): Promise<void>;
    /**
     * Creates a transaction with a specific amount of coins to a given account from the sender.
     * @param sender Theobject with the sender's account details
     * @param txs An array with multiple transactions with details of the amount and recipient
     *
     */
    createTransaction(sender: Account, txs: Transaction[]): Promise<{
        balanceLock: string | null;
        transactions: Transaction[];
        sender: Account;
    }>;
    /**
     * Sends a specific amount of coins to a given account from the sender.
     * @param transaction the object containing transaction details
     */
    broadcastTransaction(transaction: {
        balanceLock: string | null;
        transactions: Transaction[];
        sender: Account;
    }): Promise<void>;
    /**
     * Sends a specific amount of coins to a given account from the sender.
     * @param transferDetails The object with transfer details like sender, recipient and amount
     */
    sendCoins({ sender, recipient, amount, memo }: TransferDetails): Promise<void>;
    /**
     * Sends multiple amounts of coins to multiple recipients.
     * @param sender Theobject with the sender's account details
     * @param txs An array with multiple transactions with details of the amount and recipient
     */
    sendBulkTransactions(sender: Account, txs: Transaction[]): Promise<void>;
}
