import type { BlockData, BlockMessage, SignedMessage, Transaction } from "./models";
declare type AccountKeys = [Uint8Array, Uint8Array];
/** Used for creating accounts to be sent with requests. */
export declare class Account {
    /** The 32 byte array for the account number. */
    accountNumber: Uint8Array;
    /** The 64 byte array for the account signing key. */
    signingKey: Uint8Array;
    /**
     * @param signingKey the account signing key
     * @param accountNumber the account number
     */
    constructor(signingKey?: string, accountNumber?: string);
    static fromSigningKey(signingKey: string): AccountKeys;
    static fromBothKeys(signingKey: string, accountNumber: string): AccountKeys;
    static random(): AccountKeys;
    /**
     * Checks if the signing key pair is valid.
     * @param signingKey the given signing key hex string
     * @param accountNumber the given account number hex string
     */
    static isValidPair(signingKey: string, accountNumber: string): boolean;
    /** The 32 byte account number as a 32 byte hex string. */
    get accountNumberHex(): string;
    /** The 64 byte account signing key as a 32 byte hex string. */
    get signingKeyHex(): string;
    /**
     * Creates a signature for the given message.
     * @param message the message to generate the signature for
     * @returns the generated signature
     */
    createSignature(message: string): string;
    /**
     * Creates a signed data message with the given data.
     * @param data the data to be passed along in the message
     * @returns the signed message
     */
    createSignedMessage<T>(data: T): SignedMessage<T>;
    /**
     * Creates a block data object without a signature.
     * @param balanceLock the latest user balance lock
     * @param transactions the transactions inside of the block
     */
    createBlockData(balanceLock: string, transactions: Transaction[]): BlockData;
    /**
     * Creates a signed block object.
     * @param balanceLock the latest user balance lock
     * @param transactions the transactions inside of the block
     */
    createBlockMessage(balanceLock: string, transactions: Transaction[]): BlockMessage;
}
export {};
