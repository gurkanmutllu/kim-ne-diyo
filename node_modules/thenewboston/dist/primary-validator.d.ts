import type { PrimaryValidatorConfigResponse } from "./models";
import { Validator } from "./validator";
import { Transaction } from "./models";
import { Account } from "./account";
/** Used for connecting with and using primary validator server nodes. */
export declare class PrimaryValidator extends Validator {
    /** Gets the config of the current primary validator server. */
    getConfig(): Promise<PrimaryValidatorConfigResponse>;
    /**
     * Bank blocks would need to be signed by the bank indicating tha the block has passed the validation.
     * @param balanceLock the current balance lock
     * @param transactions the transactions to push to the block chain
     * @param account the account that is sending the transactions
     */
    addBankBlocks(balanceLock: string, transactions: Transaction[], account: Account): Promise<unknown>;
    /**
     * Get transaction fee of the current Primary Validator
     */
    getTxFee(): Promise<number>;
}
