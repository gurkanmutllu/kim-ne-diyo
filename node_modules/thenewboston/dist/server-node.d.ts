import type { PaginatedAccountEntry, PaginatedEntryMetadata, PaginatedResponse, PaginationOptions, ServerNodeOptions } from "./models";
import type { Account } from "./account";
import type { Protocol } from "./models/responses/constants";
/**
 * Used internally for all server nodes.
 *
 * Note: this class is meant to be extended.
 */
export declare abstract class ServerNode {
    /** The url of the server. */
    url: string;
    /** The options for the server node. */
    options: ServerNodeOptions;
    constructor(url: string, options?: Partial<ServerNodeOptions>);
    /**
     * Gets data for the given endpoint with the given query params.
     * @param endpoint the endpoint to send the request to
     * @param params the optional object for the query params
     */
    getData<T>(endpoint: string, params?: {
        [key: string]: any;
        [key: number]: any;
    }): Promise<T>;
    /**
     * Used internally for handling paginated requests.
     * @param endpoint the endpoint to send the request to
     * @param options the optional object for the pagination options
     */
    getPaginatedData<T>(endpoint: string, options: Partial<PaginationOptions>): Promise<PaginatedResponse<T>>;
    /**
     * Sends a POST request to the current server with the given `data`.
     * @param endpoint the endpoint to send the request to
     * @param data what is sent along with the POST request
     */
    postData<T>(endpoint: string, data: any): Promise<T>;
    /**
     * Sends a PATCH request to the current server with the given `data`.
     * @param endpoint the endpoint to send the request to
     * @param data what is sent along with the PATCH request
     */
    patchData<T>(endpoint: string, data: any): Promise<T>;
    /**
     * Gets the accounts for the given server node in a paginated format.
     * @param options The optional object for the pagination options.
     */
    getAccounts(options?: Partial<PaginationOptions>): Promise<PaginatedResponse<PaginatedAccountEntry & PaginatedEntryMetadata>>;
    /** Gets the current config data for the current validator. */
    protected _getConfig<T>(): Promise<T>;
    /**
     * Sends a connection request to this current network with the data about the new server.
     * @param ipAddress the new server node's ip address
     * @param port the new node's port
     * @param protocol the new node's protocol
     * @param account the server account to validate the request
     */
    sendConnectionRequest(ipAddress: string, port: number, protocol: Protocol, account: Account): Promise<unknown>;
}
